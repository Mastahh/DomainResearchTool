@using System.Collections.Concurrent;
<RadzenCard>
    <p>
        <span>Favorites: @totalFavoriteDomains</span></p>
        <p>
            <span><button class="btn" @onclick="ClearFavoriteDomainsList" disabled="@IsLoading">Clear</button></span>
            <span><button class="btn" @onclick="ExportFavoriteDomainsList" disabled="@IsLoading">Export</button></span>
            <span><button class="btn" @onclick="CopyFavoriteDomainsList" disabled="@IsLoading">Copy</button></span>
            <span><button class="btn" @onclick="PasteToFavoriteList" disabled="@IsLoading">Paste</button></span>
            <span><button class="btn" @onclick="FetchData" disabled="@IsLoading">Fetch Data</button></span>
        </p>
        <p></p>
    <RadzenDataGrid @ref="@dataGrid" AllowColumnResize="true" PageSize=@_gridPageSize RowDoubleClick="OnRowDoubleClick" @bind-Value=@selectedDomains IsLoading="@IsLoading" AllowPaging="true"
    Page="OnPageChange" AllowSorting="false" ShowPagingSummary="true"
    TItem="FavoritesDomainItem" Data="@favoriteDomainItems" Density=@Density.Compact GridLines="@Radzen.DataGridGridLines.Default">
        <Columns>
            <RadzenDataGridColumn TItem="FavoritesDomainItem" Property="@nameof(FavoritesDomainItem.DomainId)" Visible=false />
            <RadzenDataGridColumn TItem="FavoritesDomainItem" Width="200px" Property="@nameof(FavoritesDomainItem.Particles)" title="Domain">
                <Template Context="dataItem">
                    @foreach (var particleItem in dataItem.Particles)
                    {
                        if (particleItem.ParticleType != FilterType.None)
                        {
                            <span>&nbsp;</span><span style="background-color:@GetColor(particleItem.ParticleType)">@particleItem.Text</span>
                        }
                        else
                        {
                            <span>&nbsp;@particleItem.Text</span>
                        }
                    }
                  </Template>
            </RadzenDataGridColumn>
            @foreach (var columnName in _extraColumns)
            {
                <RadzenDataGridColumn TItem="FavoritesDomainItem" title="@columnName.ToPrettyCase()">
                    <Template Context="dataItem">
                        @if (dataItem.ExtraColumns.ContainsKey(columnName))
                        {
                            <span>&nbsp;@dataItem.ExtraColumns[columnName]</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    private int _gridPageSize = 10;
    IList<string> _extraColumns = new List<string>();
    IList<FavoritesDomainItem> selectedDomains;
    private RadzenDataGrid<FavoritesDomainItem> dataGrid;
    private bool IsLoading = false;
    private int totalFavoriteDomains => favoriteDomainItems.Count();
    private AppSettings _appSettings = null;
    List<FavoritesDomainItem> favoriteDomainItems = new List<FavoritesDomainItem>();
    private DataForCeoApiService _dataForCeoApiService = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _dataForCeoApiService = new DataForCeoApiService();

        AppEventService.AppSettingsChanged += OnAppSettingsChanged;
        AppEventService.DomainFilteringStarted += OnDomainFilteringStarted;
        AppEventService.DomainFilteringEnded += OnDomainFilteringEnded;
        AppEventService.DomainItemAddedToFavorites += OnDomainAddedToFavorites;
        AppEventService.GridPageSizeChanged += OnGridPageSizeChanged;

        await LoadAppSettings();
        _gridPageSize = _appSettings.GridPageSize;

        LoadFavoriteDomains();
        if (_appSettings.FavoritesPageNumber >= dataGrid.PageNumbersCount)
        {
            await dataGrid.GoToPage(_appSettings.FavoritesPageNumber);
        }
    }

    private async Task FetchData()
    {
        IsLoading = true;
        var resultData = await _dataForCeoApiService.FetchWhoisData(favoriteDomainItems.Select(el => el.DomainId).ToList());
        IsLoading = false;
        if (resultData.IsError())
        {
            NotificationMessageService.ShowWarningMessage(resultData.GetErrorMessage());
            return;
        }
        var task = resultData.Tasks.FirstOrDefault();
        if (task == null)
        {
            NotificationMessageService.ShowWarningMessage($"Task not found.");
            return;
        }
        var result = task.Result.FirstOrDefault();
        if (result == null)
        {
            NotificationMessageService.ShowWarningMessage($"Task.Result not found.");
            return;
        }
        _extraColumns.Clear();
        foreach (var item in result.Items)
        {
            var favoriteDomain = favoriteDomainItems.FirstOrDefault(el => el.DomainId == item.Domain);
            //var favoriteDomain = favoriteDomainItems.FirstOrDefault();
            if (favoriteDomain != null)
            {
                SetExtraColumnValue(favoriteDomain, nameof(item.UpdatedDateTime), item.UpdatedDateTime.ToString("G"));

                PopulateExtraColumns(item.Metrics.Organic, favoriteDomain);

                PopulateExtraColumns(item.BacklinksInfo, favoriteDomain);
            }
        }
        _appSettings.FavoriteDomains = favoriteDomainItems;
        await ConfigurationService.SaveFilterSettings(_appSettings);
    }

    private void PopulateExtraColumns<TModel>(TModel source, FavoritesDomainItem domainItem)
    {
        if (source != null)
        {
            foreach (var property in source.GetType().GetProperties())
            {
                var value = property.GetValue(source);
                SetExtraColumnValue(domainItem, property.Name, value == null ? "0" : value.ToString());
            }
        }
    }

    private void SetExtraColumnValue(FavoritesDomainItem domainItem, string columnName, string value)
    {
        domainItem.SetExtraColumnValue(columnName, value);
        if (!_extraColumns.Contains(columnName))
        {
            _extraColumns.Add(columnName);
        }
    }

    private void OnDomainFilteringStarted()
    {
        IsLoading = true;
    }

    private void OnDomainFilteringEnded()
    {
        IsLoading = false;
    }

    private async Task LoadAppSettings()
    {
        _appSettings = await ConfigurationService.GetAppSettings();
    }

    private void LoadFavoriteDomains()
    {
        favoriteDomainItems = _appSettings.FavoriteDomains.Where(el => el.Particles != null).ToList();
        if (favoriteDomainItems.FirstOrDefault() != null)
        {
            _extraColumns = favoriteDomainItems.FirstOrDefault().ExtraColumns.Keys.ToList();
        }
        IsLoading = false;
        StateHasChanged();

    }

    private async Task OnPageChange(PagerEventArgs args)
    {
        _appSettings.FavoritesPageNumber = args.PageIndex;
        await ConfigurationService.SaveFilterSettings(_appSettings, false);
    }

    private async Task OnRowDoubleClick(DataGridRowMouseEventArgs<FavoritesDomainItem> doubleClickArg)
    {
        var favDomainItem = doubleClickArg.Data;
        favoriteDomainItems.Remove(favDomainItem);
        _appSettings.FavoriteDomains = favoriteDomainItems;
        await ConfigurationService.SaveFilterSettings(_appSettings, false);

        await dataGrid.Reload();
        StateHasChanged();

        AppEventService.TriggerDomainRemovedFromFavorites(favDomainItem);
    }

    private async void OnDomainAddedToFavorites(DomainItem favDomainItem)
    {
        await AddItemToFavoritesList(new FavoritesDomainItem(favDomainItem));
    }

    private async void ClearFavoriteDomainsList()
    {
        favoriteDomainItems = new List<FavoritesDomainItem>();
        _appSettings.FavoriteDomains = favoriteDomainItems;
        await ConfigurationService.SaveFilterSettings(_appSettings);
    }

    private async Task ExportFavoriteDomainsList()
    {
        if (favoriteDomainItems != null && favoriteDomainItems.Count() > 0)
        {
            await FileService.SaveDomains(favoriteDomainItems);
        }
    }

    private void CopyFavoriteDomainsList()
    {
        Clipboard.SetData(DataFormats.Text, string.Join("\r\n", favoriteDomainItems.Select(el => el.ToFormatedString())));
    }

    private async Task AddItemToFavoritesList(FavoritesDomainItem favDomainItem)
    {
        favoriteDomainItems.Add(favDomainItem);
        _appSettings.FavoriteDomains = favoriteDomainItems;
        await ConfigurationService.SaveFilterSettings(_appSettings, false);

        await dataGrid.Reload();
        StateHasChanged();
    }

    private async Task PasteToFavoriteList()
    {
        string domainNames = (string)Clipboard.GetData(DataFormats.Text);
        if (!string.IsNullOrWhiteSpace(domainNames))
        {
            var domainsToPaste = domainNames.Replace("\r\n", "\n").Split("\n");
            foreach (var domainName in domainsToPaste)
            {
                if (!DomainUtils.IsDomainValid(domainName))
                {
                    NotificationMessageService.ShowWarningMessage($"Invalid domain '{domainName}', skipped!");
                }
                else
                {
                    var particles = FilterService.Instance.FilterDomain(domainName, _appSettings.OperatorType);
                    var domainFromClipboard = new FavoritesDomainItem()
                        {
                            DomainId = domainName,
                            ManuallyAdded = true,
                            Particles = particles ?? new() { new Particle() { Text = domainName, ParticleType = FilterType.None } }
                        };
                    await AddItemToFavoritesList(domainFromClipboard);
                }
            }

        }
    }

    private string GetColor(FilterType type)
    {
        var color = _appSettings.GetColor(type);
        return ColorTranslator.ToHtml(color);
    }

    private async void OnAppSettingsChanged()
    {
        await LoadAppSettings();
        await dataGrid.Reload();
        StateHasChanged();
    }

    private async void OnGridPageSizeChanged(int newGridPageSize)
    {
        _gridPageSize = newGridPageSize;
        StateHasChanged();
    }
}